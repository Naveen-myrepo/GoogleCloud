Introduction
In a challenge lab you’re given a scenario and a set of tasks. Instead of following step-by-step instructions, you will use the skills learned from the labs in the course to figure out how to complete the tasks on your own! An automated scoring system (shown on this page) will provide feedback on whether you have completed your tasks correctly.

When you take a challenge lab, you will not be taught new Google Cloud concepts. You are expected to extend your learned skills, like changing default values and reading and researching error messages to fix your own mistakes.

To score 100% you must successfully complete all tasks within the time period!

This lab is recommended for students who have enrolled in the Manage Kubernetes in Google Cloud skill badge. Are you ready for the challenge?

Before you click the Start Lab button
Read these instructions. Labs are timed and you cannot pause them. The timer, which starts when you click Start Lab, shows how long Google Cloud resources are made available to you.

This hands-on lab lets you do the lab activities in a real cloud environment, not in a simulation or demo environment. It does so by giving you new, temporary credentials you use to sign in and access Google Cloud for the duration of the lab.

To complete this lab, you need:

Access to a standard internet browser (Chrome browser recommended).
Note: Use an Incognito (recommended) or private browser window to run this lab. This prevents conflicts between your personal account and the student account, which may cause extra charges incurred to your personal account.
Time to complete the lab—remember, once you start, you cannot pause a lab.
Note: Use only the student account for this lab. If you use a different Google Cloud account, you may incur charges to that account.
Challenge scenario
You were onboarded at Cymbal Shops just a few months ago. You have spent a lot of time working with containers in Docker and Artifact Registry and have learned the ropes of managing new and existing deployments on GKE. You've had practice updating manifests as well as scaling, monitoring, and debugging applications running on your clusters.

cymbal shops logo

Your team would like you to start managing their Kubernetes deployments to ensure smooth rollouts and application updates to their new e-commerce website. Before you switch to this new role, the development team would like you to demonstrate your new skills. As part of this demonstration, they have a list of tasks they would like to see you do in an allotted period of time in a sandbox environment.

Your challenge
As part of the sandbox environment, your developers have created an Artifact Registry repository named cluster name that has some code with a basic example application that you will deploy onto a cluster.

Note: This image created in the repo is a containerized version of the code you will be downloading from the spls/gsp510/hello-app bucket later in the lab.
Your tasks will include the following:

Creating a GKE cluster based on a set of configurations provided.
Enabling Managed Prometheus on the cluster for metrics monitoring.
Deploying a Kubernetes manifest onto the cluster, and debugging the errors.
Creating a logs-based metric and alerting policy for the errors on the Kubernetes cluster.
Fixing the manifest errors, containerizing your application code and pushing it to Artifact Registry using Docker.
Exposing a service for your application on the cluster and verifying your updates.

### Task 1: Create a GKE Cluster

1. Set up the GKE cluster:

gcloud container clusters create cluster-name \
    --zone ZONE \
    --release-channel regular \
    --cluster-version 1.27.8 \
    --num-nodes 3 \
    --enable-autoscaling \
    --min-nodes 2 \
    --max-nodes 6

### Task 2: Enable Managed Prometheus on the GKE Cluster

1. Enable the Prometheus managed collection:

gcloud container clusters update cluster-name \
    --zone ZONE \
    --monitoring=SYSTEM,WORKLOAD

2. Create a namespace:

kubectl create namespace namespace-name

3. Download and update the sample Prometheus app:

gsutil cp gs://spls/gsp510/prometheus-app.yaml .

Update the `<todo>` sections with the following configuration:

containers:
  - image: nilebox/prometheus-example-app:latest
    name: prometheus-test
    ports:
      - name: metrics


4. Deploy the application:

kubectl apply -f prometheus-app.yaml -n namespace-name

5. Download and update the pod-monitoring.yaml file:

gsutil cp gs://spls/gsp510/pod-monitoring.yaml .

Update the `<todo>` sections with the following configuration:

metadata:
  name: prometheus-test
labels:
  app.kubernetes.io/name: prometheus-test
matchLabels:
  app: prometheus-test
endpoints:
  interval: interval-period

6. Apply the pod monitoring resource:

kubectl apply -f pod-monitoring.yaml -n namespace-name

### Task 3: Deploy an Application onto the GKE Cluster

1. Download the demo deployment manifest files:

gsutil cp -r gs://spls/gsp510/hello-app/ .

2. Create the deployment:

kubectl apply -f hello-app/manifests/helloweb-deployment.yaml -n namespace-name

3. Verify the deployment and inspect the issue:

Check the details of the helloweb deployment in the GKE console to see the `invalid image name` error.

### Task 4: Create a Logs-Based Metric and Alerting Policy

1. Create a logs-based metric using the Logs Explorer with the following query:

Resource Type: "k8s_container"
Severity: "ERROR"

2. Create a logs-based metric:

- Metric type: Counter
- Log Metric Name: pod-image-errors

3. Create an alerting policy with the following details:

- Rolling Window: 10 min
- Rolling window function: Count
- Time series aggregation: Sum
- Condition type: Threshold
- Alert trigger: Any time series violates
- Threshold position: Above threshold
- Threshold value: 0
- Use notification channel: Disable
- Alert policy name: Pod Error Alert

### Task 5: Update and Re-deploy Your App

1. Update the image in the helloweb-deployment.yaml manifest:

containers:
  - image: us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0

2. Delete the helloweb deployment:

kubectl delete deployment helloweb -n namespace-name

3. Deploy the updated manifest:

kubectl apply -f hello-app/manifests/helloweb-deployment.yaml -n namespace-name

### Task 6: Containerize Your Code and Deploy It onto the Cluster

1. Update the main.go file in the hello-app directory to use Version: 2.0.0 on line 49.

2. Build the Docker image:

docker build -t us-docker.pkg.dev/repo-name/hello-app:v2 .


3. Push the Docker image to Artifact Registry:

docker push us-docker.pkg.dev/repo-name/hello-app:v2


4. Update the image in the helloweb deployment:

containers:
  - image: us-docker.pkg.dev/repo-name/hello-app:v2


5. Expose the helloweb deployment to a LoadBalancer service:

kubectl expose deployment helloweb --type=LoadBalancer --name=service-name --port=8080 --target-port=TARGET_PORT -n namespace-name


Navigate to the external IP address of the LoadBalancer service to verify the deployment.

Congratulations!
Congratulations! In this lab you verified your skills on creating a GKE cluster based on a set of configurations and enabling the Prometheus managed collection. You also troubleshooted errors on a cluster and created a logs-based metric and alerting policy, and then updated Kubernetes manifests to fix the issue. Lastly, you containerized your application code and pushed a new build to a repository in Artifact Registry using Docker, updated your cluster to reflect the new image, and exposed a service on the cluster. You are ready to start managing Kubernetes in your own environments!
