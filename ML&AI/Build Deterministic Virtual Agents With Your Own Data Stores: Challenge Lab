Challenge Lab Overview
This lab will challenge you to perform actions and automation across products. Instead of following step-by-step instructions, you are given a common business scenario and a set of tasks - you figure out how to complete them on your own! An automated scoring system (shown on this page) provides feedback on whether you have completed your tasks correctly.

When you take a Challenge Lab, you will not be taught Google Cloud concepts. You will need to use your skills to assess how to build the solution to the challenge presented. This lab is only recommended for students who have those skills. Are you up for the challenge?
Objective
The objective of this challenge lab is to demonstrate your proficiency in deploying chat applications and customizing chatbots through Dialogflow CX and Vertex AI Agent Builder. Additionally, emphasis is placed on constructing a tailored Q&A system utilizing data stores. In this lab, you will be ready to deploy conversational solutions for customer opportunities.

Setup
Qwiklabs setup
For each lab, you get a new Google Cloud project and set of resources for a fixed time at no cost.

Make sure you signed into Qwiklabs using an incognito window.

Note the lab's access time (for example, img/time.png and make sure you can finish in that time block.

There is no pause feature. You can restart if needed, but you have to start at the beginning.


When ready, click img/start_lab.png.

Note your lab credentials. You will use them to sign in to the Google Cloud Console. img/open_google_console.png

Click Open Google Console.

Click Use another account and copy/paste credentials for this lab into the prompts.

If you use other credentials, you'll get errors or incur charges.

Accept the terms and skip the recovery resource page.
Do not click End Lab unless you are finished with the lab or want to restart it. This clears your work and removes the project.

Activate Cloud Shell
Cloud Shell is a virtual machine that is loaded with development tools. It offers a persistent 5GB home directory and runs on the Google Cloud. Cloud Shell provides command-line access to your Google Cloud resources.

In the Cloud Console, in the top right toolbar, click the Activate Cloud Shell button.

Cloud Shell icon

Click Continue.

cloudshell_continue.png

It takes a few moments to provision and connect to the environment. When you are connected, you are already authenticated, and the project is set to your PROJECT_ID. For example:

Cloud Shell Terminal

gcloud is the command-line tool for Google Cloud. It comes pre-installed on Cloud Shell and supports tab-completion.

You can list the active account name with this command:

gcloud auth list
(Output)

Credentialed accounts:
 - <myaccount>@<mydomain>.com (active)
(Example output)

Credentialed accounts:
 - google1623327_student@qwiklabs.net
You can list the project ID with this command:

gcloud config list project
(Output)

[core]
project = <project_ID>
(Example output)

[core]
project = qwiklabs-gcp-44776a13dea667a6
For full documentation of gcloud see the gcloud command-line tool overview.
Challenge Scenario
Cymbal Shops Logo

Here is a company overview as provided on Cymbal Shops’s website.

Cymbal Shops is an American retail chain headquartered in Minneapolis that sells homewares, electronics, and clothing.

Founded in 1974, Cymbal Shops started out as Cymbal Air, selling AC systems manufactured by Cymbal Group in Minnesota and neighboring states. The company quickly expanded into domestic merchandise in order to satisfy the need for quality products at an affordable price in the midst of a recession.

Cymbal Shops’ broad product assortment was once a benefit - capturing planned purchases and last minute splurges. In recent years, however, the company has struggled to adapt to the acceleration in e-commerce. Digitally native companies are on the rise and Cymbal Shops must implement significant changes in order to keep pace and maintain relevance. Today, Cymbal Shops operates 714 stores across North America and reported $15 billion in revenue in 2019. They currently employ 80,400 employees across the United States and Canada.

Cymbal Shops is a digitally transforming legacy retailer.

It is inspired by clients like: Bed Bath & Beyond, Best Buy, Home Depot, Nordstrom.

Your challenge
You work as an engineer at Cymbal Shops, a retail chain company renowned for its innovative solutions. Cymbal Shops is embarking on a significant project that involves developing robust search functionality and a virtual assistant for a new application. Your task is to design a Proof of Concept (POC) solution that seamlessly creates and deploys Virtual Agents using Dialogflow CX and Vertex AI Agent Builder and focuses on generating generative capabilities using Vertex AI Agent Builder and Gemini.

Cymbal Shops' new application demands a powerful and efficient search feature, aiming to catalog and retrieve various data types, including text documents, images, and structured data using Vertex AI Agent Builder. Additionally, the company aims to create a virtual assistant using Vertex AI Agent Builder to assist customers with queries about products and devices available in the Google Store. The virtual assistant will be built and configured using Vertex AI Agent Builder.

Therefore in this lab, you should:

Build and deploy a deterministic chatbot using Dialogflow CX.
Add generative capabilities using Vertex AI Agent Builder and Gemini.

Task 1: Build a Deterministic Bot using Dialogflow CX

1. Enable Vertex AI Agent Builder API:
   - Go to the [Google Cloud Console](https://console.cloud.google.com/).
   - Navigate to the APIs & Services section.
   - Enable the Vertex AI Agent Builder API.

2. Create an Agent in Dialogflow CX:
   - Open the [Dialogflow CX console](https://dialogflow.cloud.google.com/cx/).
   - Click on Create Agent.
   - Name the agent as "Agent Name" and select the global region.
   - Enable the Cloud Logging and Conversation History options in the Agent Settings.

3. Add Intent `book_an_appointment`:
   - Go to the Intents section.
   - Click **Create Intent** and name it `book_an_appointment`.
   - Add training phrases based on the sample transcript:
     - "I'd like to book an appointment."
     - "I need to schedule an appointment."
     - "Can I book an appointment?"

4. Create Appointment Page:
   - In the Start page, add a transition to a new page named "Appointment" using the `book_an_appointment` intent.
   - Create a new page named "Appointment Information".
   - In this page, gather the following information:
     - Location: `@sys.location` - "What store are you interested in going to?"
     - Date: `@sys.date` - "What day of the week would you like the appointment for?"
     - Time: `@sys.time` - "What time is convenient for you? Our available time slots are mornings, from 9:00 AM to 11:00 AM."
     - Name: `@sys.person` - "What name should I put in the reservation?"

5. Create Confirm Appointment Page:
   - Add a routing condition to transition to a new page named "Confirm Appointment" based on the following rule:
     - Condition: Match AT LEAST ONE rule (OR)
     - Condition rules: `$page.params.status = "FINAL"`
   - Define the agent's response for the end-user:
     - "Great $session.params.name. You are all set for next $session.params.date at $session.params.time in our $session.params.location."

6. Add Entry Fulfillment in Confirm Appointment Page:
   - Entry fulfillment: "Great your appointment is booked!"

7. Add Distinct Routes:
   - confirmation.yes:
     - Training phrases: "Thanks", "Thanks, bye", "Ok"
     - Fulfillment agent response: "Welcome, Have a nice day!"
   - confirmation.no:
     - Training phrases: "No"
     - Parameter presets: 
       - location: null
       - date: null
       - time: null
       - name: null
     - Set transition to a new page named "Appointment Information".

8. Test the Agent:
   - Interact with the agent using a sample dialog like:
     - User: "I'd like to book an appointment."
     - Agent: "What store are you interested in going to?"

Task 2: Deploy a Chatbot built using Vertex AI Agent Builder

1. Create a Vertex AI Search and Conversation App:
   - Go to the [Vertex AI console](https://console.cloud.google.com/vertex-ai).
   - Create a new application of type "Chat" in the Global region.
   - Link this app to your Dialogflow CX agent.

2. Configure Data Store:
   - Create a new data store named "Datastore Name".
   - Direct it to the Cloud Storage bucket: `cloud-samples-data/dialogflow-cx/google-store`.
   - Wait for the data import to complete.

3. Link Agent to Data Store:
   - In the Dialogflow CX console, go to the "Start Page".
   - Use the "Add state handler" option to connect to the data store named "Datastore Name".

4. Define Agent Responses:
   - Go to the Default Welcome Intent page.
   - Add responses to use the data store using the "Add Dialogue" option.

5. Test the Agent:
   - Ask questions like:
     - "Hello"
     - "How long does the battery in the Pixel 7 Pro last?"
     - "Is the Pixel Watch water-resistant?"
     - "Can I display my Google Photos on a Nest Hub?"

Congratulations!
You have successfully navigated the complexities of building deterministic virtual agents with your own data stores on Google Cloud in this hands-on lab. By developing a basic, deterministic chatbot using Dialogflow CX that can understand and respond to user requests according to a defined script, you created a chatbot that can answer user questions about products in the Google Store by accessing information from Cloud Storage.
