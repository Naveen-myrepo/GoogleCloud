Overview
In a challenge lab youâ€™re given a scenario and a set of tasks. Instead of following step-by-step instructions, you will use the skills learned from the labs in the course to figure out how to complete the tasks on your own! An automated scoring system (shown on this page) will provide feedback on whether you have completed your tasks correctly.

When you take a challenge lab, you will not be taught new Google Cloud concepts. You are expected to extend your learned skills, like changing default values and reading and researching error messages to fix your own mistakes.

To score 100% you must successfully complete all tasks within the time period!

This lab is recommended for students preparing for the Google Cloud Certified Professional Cloud Architect certification exam. Are you up for the challenge?

Challenge scenario
You are taking over ownership of a test environment and have been given an updated version of a containerized test application to deploy. Your systems' architecture team has started adopting a containerized microservice architecture. You are responsible for managing the containerized test web applications. You will first deploy the initial version of a test application, called echo-app to a Kubernetes cluster called echo-cluster in a deployment called echo-web. The cluster will be deployed in the ZONE zone.

Before you get started, in the Navigation menu, select Cloud Storage > Buckets.

Verify the echo-web-v2.tar.gz file is in the bucket name bucket.

Storage browser containing the relevant bucket

Next, you will check to make sure your GKE cluster has been created before continuing.

In the Navigation menu, select Kubernetes Engine > Clusters.
Continue when you see a green checkmark next to echo-cluster:

echo-cluster with green checkmark on the Kubernetes clusters page

To deploy your first version of the application, run the following commands in Cloud Shell to get up and running:
gcloud container clusters get-credentials echo-cluster --zone=ZONE
kubectl create deployment echo-web --image=gcr.io/qwiklabs-resources/echo-app:v1
kubectl expose deployment echo-web --type=LoadBalancer --port 80 --target-port 8000

Your challenge
You need to update the running echo-app application in the echo-web deployment from the v1 to the v2 code you have been provided. You must also scale out the application to 2 instances and confirm that they are all running.

# Task 1: Build and Tag the Docker Image
# Step 1: Download the archive from the Cloud Storage bucket
gsutil cp gs://<bucket-name>/echo-web-v2.tar.gz .

# Step 2: Extract the archive
tar -xzf echo-web-v2.tar.gz

# Step 3: Build the Docker image
docker build -t gcr.io/<your-project-id>/echo-app:v2 .

# Step 4: Tag the image
docker tag gcr.io/<your-project-id>/echo-app:v2 gcr.io/<your-project-id>/echo-app:v2

# Task 2: Push the Image to the Container Registry
# Push the image to gcr.io
docker push gcr.io/<your-project-id>/echo-app:v2

# Task 3: Deploy the Updated Application
# Set credentials for your cluster
gcloud container clusters get-credentials echo-cluster --zone <ZONE>

# Update the deployment
kubectl set image deployment/echo-web echo-web=gcr.io/<your-project-id>/echo-app:v2

# Task 4: Scale Out the Application
# Scale the deployment to 2 replicas
kubectl scale deployment echo-web --replicas=2

# Task 5: Confirm the Application is Running
# Check the status of the pods
kubectl get pods -o wide

# Get the external IP of the service
kubectl get svc

# Use the external IP to test the application
curl http://<external-ip>

Troubleshooting
Receiving a 504, Gateway timeout error: This might just indicate that the application hasn't quite initialized yet, but it could also be caused by a mismatch between the default port that is set in the Dockerfile (TCP port 8000) and:

The choice of application port you configured when deploying the application image, or
When you configured external access.
Congratulations!
Congratulations! In this lab, you deployed a containerized application to a Kubernetes cluster, updated the application, and scaled it out. You are now ready to take on the world of containerized applications!
