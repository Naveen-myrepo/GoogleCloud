Overview
In a challenge lab you’re given a scenario and a set of tasks. Instead of following step-by-step instructions, you will use the skills learned from the labs in the course to figure out how to complete the tasks on your own! An automated scoring system (shown on this page) will provide feedback on whether you have completed your tasks correctly.

When you take a challenge lab, you will not be taught new Google Cloud concepts. You are expected to extend your learned skills, like changing default values and reading and researching error messages to fix your own mistakes.

To score 100% you must successfully complete all tasks within the time period!

This lab is recommended for students who have enrolled in the Build Infrastructure with Terraform on Google Cloud course. Are you ready for the challenge?

Topics tested:
Import existing infrastructure into your Terraform configuration.
Build and reference your own Terraform modules.
Add a remote backend to your configuration.
Use and implement a module from the Terraform Registry.
Re-provision, destroy, and update infrastructure.
Test connectivity between the resources you've created.
Setup and requirements
Before you click the Start Lab button
Read these instructions. Labs are timed and you cannot pause them. The timer, which starts when you click Start Lab, shows how long Google Cloud resources are made available to you.

This hands-on lab lets you do the lab activities in a real cloud environment, not in a simulation or demo environment. It does so by giving you new, temporary credentials you use to sign in and access Google Cloud for the duration of the lab.

To complete this lab, you need:

Access to a standard internet browser (Chrome browser recommended).
Note: Use an Incognito (recommended) or private browser window to run this lab. This prevents conflicts between your personal account and the student account, which may cause extra charges incurred to your personal account.
Time to complete the lab—remember, once you start, you cannot pause a lab.
Note: Use only the student account for this lab. If you use a different Google Cloud account, you may incur charges to that account.
Challenge scenario
You are a cloud engineer intern for a new startup. For your first project, your new boss has tasked you with creating infrastructure in a quick and efficient manner and generating a mechanism to keep track of it for future reference and changes. You have been directed to use Terraform to complete the project.

For this project, you will use Terraform to create, deploy, and keep track of infrastructure on the startup's preferred provider, Google Cloud. You will also need to import some mismanaged instances into your configuration and fix them.

In this lab, you will use Terraform to import and create multiple VM instances, a VPC network with two subnetworks, and a firewall rule for the VPC to allow connections between the two instances. You will also create a Cloud Storage bucket to host your remote backend.

Note: At the end of every section, plan and apply your changes to allow your work to be successfully verified. Since we will be updating many terraform files in this lab make sure to use the correct file path and maintain the correct indentation.

Task 1: Create the configuration files

`main.tf`:

terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = ">= 3.5.0"
    }
  }
  backend "gcs" {
    bucket = "Bucket_Name"
    prefix = "terraform/state"
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
  zone    = var.zone
}


`variables.tf`:

variable "project_id" {
  description = "The project ID to deploy to"
}

variable "region" {
  description = "The region to deploy to"
  default     = "us-central1"
}

variable "zone" {
  description = "The zone to deploy to"
  default     = "us-central1-a"
}


`modules/instances/instances.tf`:

resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }
  
  network_interface {
    network = var.network
  }

  metadata_startup_script = <<-EOT
    #!/bin/bash
  EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }
  
  network_interface {
    network = var.network
  }

  metadata_startup_script = <<-EOT
    #!/bin/bash
  EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "instance-3" {
  name         = "instance-3"
  machine_type = "e2-standard-2"
  
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }
  
  network_interface {
    network = var.network
  }

  metadata_startup_script = <<-EOT
    #!/bin/bash
  EOT
  allow_stopping_for_update = true
}


`modules/instances/outputs.tf`:

output "instance_1_name" {
  value = google_compute_instance.tf-instance-1.name
}

output "instance_2_name" {
  value = google_compute_instance.tf-instance-2.name
}

output "instance_3_name" {
  value = google_compute_instance.instance-3.name
}


`modules/instances/variables.tf`:

variable "network" {
  description = "The name of the network"
}


`modules/storage/storage.tf`:

resource "google_storage_bucket" "bucket" {
  name                        = "Bucket_Name"
  location                    = "US"
  force_destroy               = true
  uniform_bucket_level_access = true
}


`modules/storage/outputs.tf`:

output "bucket_name" {
  value = google_storage_bucket.bucket.name
}


`modules/storage/variables.tf`:

variable "bucket_name" {
  description = "The name of the bucket"
}


Task 2: Import infrastructure

In `main.tf` add:

module "instances" {
  source = "./modules/instances"
  network = "default"
}

In Cloud Shell, initialize Terraform and import instances:

terraform init
terraform import module.instances.google_compute_instance.tf-instance-1 <instance_1_id>
terraform import module.instances.google_compute_instance.tf-instance-2 <instance_2_id>

Task 3: Configure a remote backend

In `main.tf` add:

module "storage" {
  source = "./modules/storage"
}


Initialize and apply changes:

terraform init
terraform apply

Task 4: Modify and update infrastructure

Edit `modules/instances/instances.tf` to change machine type for `tf-instance-1` and `tf-instance-2`, and add `instance-3`.

Initialize and apply changes:

terraform init
terraform apply

Task 5: Destroy resources

Remove `instance-3` from `modules/instances/instances.tf`.

Initialize and apply changes:

terraform init
terraform apply


Task 6: Use a module from the Registry

In `main.tf` add:
module "vpc" {
  source  = "terraform-google-modules/network/google"
  version = "6.0.0"

  project_id   = var.project_id
  network_name = "VPC_Name"
  routing_mode = "GLOBAL"

  subnets = [
    {
      subnet_name   = "subnet-01"
      subnet_ip     = "10.10.10.0/24"
      subnet_region = var.region
    },
    {
      subnet_name   = "subnet-02"
      subnet_ip     = "10.10.20.0/24"
      subnet_region = var.region
    },
  ]
}

Update `modules/instances/instances.tf` to connect instances to the correct subnets.

Initialize and apply changes:

terraform init
terraform apply

Task 7: Configure a firewall

In `main.tf` add:

resource "google_compute_firewall" "tf-firewall" {
  name    = "tf-firewall"
  network = module.vpc.network_name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]
}

Initialize and apply changes:

terraform init
terraform apply

Congratulations!
If you managed to import, create, modify, and configure the architecture within the allotted time, you've shown great competency in your Terraform skills! In this lab, you started by importing two pre-configured VMs into Terraform and creating a Cloud Storage bucket to configure your backend. You then added another instance and practiced modifying and updating the resource configurations within your modules. Lastly, you used a module from the Terraform Registry to create a VPC with two subnets, connected the instances to it, and created a firewall rule to allow connections between them.
