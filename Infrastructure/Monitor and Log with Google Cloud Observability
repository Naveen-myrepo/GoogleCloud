Overview
In a challenge lab you’re given a scenario and a set of tasks. Instead of following step-by-step instructions, you will use the skills learned from the labs in the course to figure out how to complete the tasks on your own! An automated scoring system (shown on this page) will provide feedback on whether you have completed your tasks correctly.

When you take a challenge lab, you will not be taught new Google Cloud concepts. You are expected to extend your learned skills, like changing default values and reading and researching error messages to fix your own mistakes.

To score 100% you must successfully complete all tasks within the time period!

This lab is recommended for students enrolled in the Monitor and Log with Google Cloud Observability course. Are you ready for the challenge?

Topics tested:

Initialize Cloud Monitoring.
Configure a Compute Engine application for Cloud Operations Monitoring custom metrics.
Create a custom metric using Cloud Operations logging events.
Add custom metrics to a Cloud Monitoring Dashboard.
Create a Cloud Operations alert.
Note: The lab startup procedure deploys a Cloud Function that you will use throughout the lab. You can start the lab without waiting for this to complete as the first few tasks do not depend on the Cloud Function.
Setup
Before you click the Start Lab button
Read these instructions. Labs are timed and you cannot pause them. The timer, which starts when you click Start Lab, shows how long Google Cloud resources are made available to you.

This hands-on lab lets you do the lab activities in a real cloud environment, not in a simulation or demo environment. It does so by giving you new, temporary credentials you use to sign in and access Google Cloud for the duration of the lab.

To complete this lab, you need:

Access to a standard internet browser (Chrome browser recommended).
Note: Use an Incognito (recommended) or private browser window to run this lab. This prevents conflicts between your personal account and the student account, which may cause extra charges incurred to your personal account.
Time to complete the lab—remember, once you start, you cannot pause a lab.
Note: Use only the student account for this lab. If you use a different Google Cloud account, you may incur charges to that account.
Challenge scenario
In your new role as Junior Cloud Engineer for Jooli Inc., you're expected to help manage the Cloud infrastructure components and support the video operations team. Common tasks include monitoring resource utilization, analyzing logs, configuring alerts, and reporting on any issues related to Jooli Inc.'s online services.

As you're expected to have the skills and knowledge for these tasks, step-by-step guides are not provided.

Some Jooli Inc. standards you should follow:

Create all resources in the <filled in at lab start> region and <filled in at lab start> zone, unless otherwise directed.
Naming is team-resource, e.g. an instance could be named video-webserver1.
Allocate cost effective resource sizes. Projects are monitored and excessive resource use will result in the containing project's termination (and possibly yours), so beware. Unless directed, use e2-medium.
Your challenge
On the first day of your new job, your manager gives you a series of tasks that you must complete. Good luck!

Your primary concern is a media upload function that Jooli Inc. provides. This function allows subscribers to upload video content to edit and transform using Jooli Inc.'s innovative range of cloud based media production tools.

The media upload function is a critical part of the service, and it is vital that Jooli Inc. is aware of any changes in the behavior of the users that might impact performance or cost of the services.

Your tasks today will use Cloud Operations tools to improve the company's ability to identify such changes and respond to them rapidly. Your manager has told you that the company is concerned that recent changes in end user behavior, combined with a new generation of phones and tablets, is fuelling a demand for much higher media such as 4K, and even 8K, video. Storage for the data is a relatively minor concern but the company wants to make sure that resource consumption by the Cloud Functions used for media upload and transcoding do not run into any limits or result in unexpected spikes in billing costs.

Sure, I can provide a general guide for each of the tasks. Here’s an overview of what you need to do:

Task 1: Configure Cloud Monitoring

1. Enable the Cloud Monitoring API for your project.
2. Navigate to the Cloud Monitoring dashboard in the Google Cloud Console.

Task 2: Configure a Compute Instance to generate Custom Cloud Monitoring metrics

1. Edit the startup script of the `video-queue-monitor` Compute Instance.
2. Make sure the Go application installed in `/work/go` is correctly configured to create and write to custom metrics.
3. Restart the Compute Instance to apply the changes.

Task 3: Create a custom metric using Cloud Operations logging events

1. Use the Cloud Operations logs to create a custom metric.
2. Search for log entries that contain `"file_format: 4K"` or `"file_format: 8K"` in the `textPayload` field.
3. Create a custom log-based metric to monitor the rate at which high resolution video files are uploaded.

Task 4: Add custom metrics to the Media Dashboard in Cloud Operations Monitoring

1. Add a chart for the `input_queue_size` custom metric to the Media_Dashboard.
2. Add a chart for the high resolution video upload rate custom log-based metric to the Media_Dashboard.

Task 5: Create a Cloud Operations alert based on the rate of high resolution video file uploads

1. Create a custom alert using the high resolution video upload metric.
2. Configure the alert to trigger when the upload rate exceeds a specified threshold.

Below is an example code snippet to accomplish these tasks:

Task 1: Enable Cloud Monitoring

gcloud services enable monitoring.googleapis.com

Task 2: Startup script for Compute Instance

Edit the metadata for your Compute Instance to include the startup script:

gcloud compute instances add-metadata video-queue-monitor \
--metadata startup-script='#!/bin/bash
# Install Cloud Monitoring agent
curl -sSO https://dl.google.com/cloudagents/add-monitoring-agent-repo.sh
sudo bash add-monitoring-agent-repo.sh
sudo apt-get update
sudo apt-get install stackdriver-agent
# Install and start Go application
cd /work/go
./start.sh


Task 3: Create a custom metric using Cloud Operations logging events

1. Go to Logging > Logs-based metrics in the Google Cloud Console.
2. Create a new logs-based metric using the advanced filter:

textPayload=~"file_format\: ([4,8]K).*"


3. Set the metric name to `Custom Metric Name`.

Task 4: Add custom metrics to Media Dashboard

1. Go to Monitoring > Dashboards in the Google Cloud Console.
2. Edit the `Media_Dashboard` and add a new chart for `input_queue_size`:


Metric: custom.googleapis.com/opencensus/my.videoservice.org/measure/input_queue_size

3. Add another chart for the high resolution video upload rate custom log-based metric:


Metric: logging/user/Custom_Metric_Name

Task 5: Create a Cloud Operations alert

1. Go to Monitoring > Alerting in the Google Cloud Console.
2. Create a new alert policy using the high resolution video upload metric.
3. Set the condition to trigger when the upload rate exceeds the specified threshold.

Tips and tricks
Tip 1. The startup script for the Compute Instance is in the Compute Instance metadata key called startup_script.
Tip 2. The Compute Instance must have the Cloud Monitoring agent installed and the Go application requires environment variables to be configured with the Google Cloud project, the instance ID, and the compute engine zone.
Tip 3. The Video Queue length monitoring Go application writes the queue length metric data to a metric called custom.googleapis.com/opencensus/my.videoservice.org/measure/input_queue_size associated with the gce_instance resource type.
Tip 4. To create the custom log based metric, the easiest filter to use is the advanced filter query textPayload=~"file_format\: ([4,8]K).*". That is a regular expression that matches all Cloud Operations events for the two high resolution video formats you are interested in. You can use the same regular expression and configure labels in the metric definition, which creates a separate time series for each of the two high resolution formats.
Tip 5. You must use the name provided for the custom log based metric that monitors the rate at which high resolution videos are processed: Custom Metric Name.
Congratulations!
Congratulations! In this lab, you demonstrated your ability to configure Cloud Monitoring and Cloud Operations to monitor and alert on the performance of a Cloud Function that processes video uploads. You first enabled Cloud Monitoring for your project and then configured a Compute Instance to generate custom metrics. You then created a custom metric using Cloud Operations logging events and added custom metrics to the Media Dashboard in Cloud Operations Monitoring. Finally, you created a Cloud Operations alert based on the rate of high resolution video file uploads.

