Overview
In a challenge lab you’re given a scenario and a set of tasks. Instead of following step-by-step instructions, you will use the skills learned from the labs in the course to figure out how to complete the tasks on your own! An automated scoring system (shown on this page) will provide feedback on whether you have completed your tasks correctly.

When you take a challenge lab, you will not be taught new Google Cloud concepts. You are expected to extend your learned skills, like changing default values and reading and researching error messages to fix your own mistakes.

To score 100% you must successfully complete all tasks within the time period!

This lab is recommended for students enrolled in the Implement CI/CD Pipelines on Google Cloud course. Are you ready for the challenge?

Topics tested
Using Cloud Build and Artifact Registry for containers.
Setting up Cloud Deploy pipelines using Skaffold.
Deploying to multiple environments with promotion approvals.
Rolling back deployments.
Setup
Before you click the Start Lab button
Read these instructions. Labs are timed and you cannot pause them. The timer, which starts when you click Start Lab, shows how long Google Cloud resources are made available to you.

This hands-on lab lets you do the lab activities in a real cloud environment, not in a simulation or demo environment. It does so by giving you new, temporary credentials you use to sign in and access Google Cloud for the duration of the lab.

To complete this lab, you need:

Access to a standard internet browser (Chrome browser recommended).
Note: Use an Incognito (recommended) or private browser window to run this lab. This prevents conflicts between your personal account and the student account, which may cause extra charges incurred to your personal account.
Time to complete the lab—remember, once you start, you cannot pause a lab.
Note: Use only the student account for this lab. If you use a different Google Cloud account, you may incur charges to that account.
You must wait for the lab to provision before making any changes to the environment! The pre-configured parts of the environment that you need to work with will be available to you as soon as the lab indicates it is ready.

Challenge Scenario
You have started a new role as a Cloud Engineer for Jooli Inc. New management has decided to modernize and believe it's best to completely replace their legacy systems with managed infrastructure and automated integration and delivery pipelines. They have tasked you with finding and testing the best tools and services to achieve this.

By the end of the day, management would like to see a proof of concept that can address all of the following:

Container images stored in a secure and reliable registry.
Automatic container image scanning with detailed reports on security vulnerabilities.
A test web application running on managed infrastructure.
A CI/CD pipeline defined as code in order to eliminate manual errors.
A reliable, easy, and quick way to deploy code and promote to a production-like environment or rollback if necessary.
You're expected to help manage the Cloud infrastructure and deployment tools at Jooli. Common tasks include provisioning resources for projects and implementing new products and services to ensure Jooli Inc. is modernizing effectively and following best practices.

You are expected to have the skills and knowledge for these tasks, so step-by-step guides won't be provided.

Some Jooli Inc. standards you should follow:

Create all resources in the <filled in at lab start> region, unless otherwise directed.
Use the project default VPC.
Allocate cost effective resource sizes. Projects are monitored and excessive resource use will result in the containing project's termination (and possibly yours), so beware. This is the guidance the monitoring team is willing to share; unless directed, use the default machine types.
Your challenge
As soon as you sit down at your desk and open your new laptop, you receive the following request to complete a set of tasks. Good luck!

PRE-WORK - Enable APIs, Create GKE clusters and create an docker repository in Artifact Registry.
Clone source code, build image, and push to artifact registry.
Create delivery pipeline, targets, and release.
Rebuild and push image, tag with latest.
Create new release with latest version.
Promote the latest release to second cluster.
Rollback changes to second cluster, modify, and re-release.

## Task 1: Prework - Set up environment, enable APIs and create clusters
# Set up environment variables
export PROJECT_ID=$(gcloud config get-value project)
export PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')
export REGION=<your-region>
gcloud config set compute/region $REGION

# Enable the necessary services
gcloud services enable \
container.googleapis.com \
clouddeploy.googleapis.com \
artifactregistry.googleapis.com \
cloudbuild.googleapis.com

# Enable permissions for Kubernetes and Cloud Deploy
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")-compute@developer.gserviceaccount.com \
--role="roles/clouddeploy.jobRunner"

gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")-compute@developer.gserviceaccount.com \
--role="roles/container.developer"

# Create an Artifact Repository
gcloud artifacts repositories create cicd-challenge \
--description="Image registry for tutorial web app" \
--repository-format=docker \
--location=$REGION

# Create GKE clusters for staging and production
gcloud container clusters create cd-staging --zone=<your-zone> --num-nodes=1 --async
gcloud container clusters create cd-production --zone=<your-zone> --num-nodes=1 --async

## Task 2: Build the images and upload to the repository
# Clone the repository
cd ~/
git clone https://github.com/GoogleCloudPlatform/cloud-deploy-tutorials.git
cd cloud-deploy-tutorials
git checkout c3cae80 --quiet
cd tutorials/base

# Create skaffold.yaml configuration
envsubst < clouddeploy-config/skaffold.yaml.template > web/skaffold.yaml
cat web/skaffold.yaml

# Build the application and deploy the container image
cd web
skaffold build --interactive=false \
--default-repo <your-artifact-repository-path> \
--file-output artifacts.json
cd ..

## Task 3: Create the Delivery Pipeline

# Copy the pipeline template file
cp clouddeploy-config/delivery-pipeline.yaml.template clouddeploy-config/delivery-pipeline.yaml
sed -i "s/targetId: staging/targetId: cd-staging/" clouddeploy-config/delivery-pipeline.yaml
sed -i "s/targetId: prod/targetId: cd-production/" clouddeploy-config/delivery-pipeline.yaml
sed -i "/targetId: test/d" clouddeploy-config/delivery-pipeline.yaml

# Set the deployment region and apply the pipeline configuration
sed -i "s/region:/region: $REGION/" deploy/region.yaml
gcloud beta deploy delivery-pipelines apply --file=clouddeploy-config/delivery-pipeline.yaml

# Verify the delivery pipeline was created
gcloud beta deploy delivery-pipelines describe web-app


## Configure the deployment targets

# Verify clusters are ready
gcloud container clusters list --format="csv(name,status)"

# Create contexts for each cluster
CONTEXTS=(cd-staging cd-production)
for CONTEXT in ${CONTEXTS[@]}
do
    gcloud container clusters get-credentials ${CONTEXT} --region ${REGION}
    kubectl config rename-context gke_${PROJECT_ID}_${REGION}_${CONTEXT} ${CONTEXT}
done

# Create a namespace in each cluster
for CONTEXT in ${CONTEXTS[@]}
do
    kubectl --context ${CONTEXT} apply -f kubernetes-config/web-app-namespace.yaml
done

# Create the delivery pipeline targets
envsubst < clouddeploy-config/target-staging.yaml.template > clouddeploy-config/target-cd-staging.yaml
envsubst < clouddeploy-config/target-prod.yaml.template > clouddeploy-config/target-cd-production.yaml

sed -i "s/staging/cd-staging/" clouddeploy-config/target-cd-staging.yaml
sed -i "s/prod/cd-production/" clouddeploy-config/target-cd-production.yaml

# Apply the target files
gcloud beta deploy apply --file=clouddeploy-config/target-cd-staging.yaml
gcloud beta deploy apply --file=clouddeploy-config/target-cd-production.yaml


## Task 4: Create a Release

# Create a release
gcloud beta deploy releases create web-app-001 --delivery-pipeline web-app --file=skaffold.yaml --source=web

# Verify the application deployment to staging
gcloud beta deploy rollouts list --delivery-pipeline web-app --release web-app-001

## Task 5: Promote your application to production

# Promote application to production
gcloud beta deploy releases promote web-app-001 --to-target cd-production

# Approve the deployment
gcloud beta deploy rollouts approve --delivery-pipeline web-app --release web-app-001 --target cd-production


## Task 6: Make a change to the application and redeploy it

# Modify app.go and build the application
cd cloud-deploy-tutorials/tutorials/base/web/leeroy-app/
sed -i 's/fmt.Fprintf(w, "leeroooooy app!!\\n")/fmt.Fprintf(w, "leeroooooy app v2!!\\n")/' app.go

# Build the application and push to the Artifact Registry
skaffold build --interactive=false --default-repo <your-artifact-repository-path> --file-output artifacts.json

# Create a new release
gcloud beta deploy releases create web-app-002 --delivery-pipeline web-app --file=skaffold.yaml --source=web

# Verify the new version deployment to staging
gcloud beta deploy rollouts list --delivery-pipeline web-app --release web-app-002


## Task 7: Rollback The Change

# Rollback to the previous version
gcloud beta deploy rollouts rollback --delivery-pipeline web-app --release web-app-001 --target cd-staging

# Verify the rollback
gcloud beta deploy rollouts list --delivery-pipeline web-app --release web-app-001


Remember to replace placeholders like `<your-region>`, `<your-artifact-repository-path>`, and `<your-zone>` with actual values. 

Congratulations!
In this lab, you have successfully set up a CI/CD pipeline using Google Cloud Deploy and Artifact Registry. You've created a proof of concept that addressed all of management's requirements. Jooli Inc. is now well on their way towards achieving higher ROI with the benefits of application modernization!

